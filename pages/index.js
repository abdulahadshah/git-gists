import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React, { useState } from 'react'
import { Octokit } from "@octokit/core";

export default function Home() {

  const [searchResults, setSearchResults] = useState([])

  async function fetchPublicGistsByUser(e) {
    e.preventDefault();
    const formData = new FormData(e.target);
    const formProps = Object.fromEntries(formData);

    const octokit = new Octokit({
      auth: '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'
    })
    const response = await octokit.request('GET /users/{username}/gists', formProps)
    if ('data' in response) {

      setSearchResults(response?.data)
    }
  }



  const ForkedGist = ({ gist }) => {
    return <img src={gist?.owner?.avatar_url} className={styles.image} onClick={() => window.open(gist?.url, "_blank")} height="50" width="50" alt="avatar" />
  }

  const GistCard = ({ result }) => {
    const [gistForks, setGistForks] = useState([])
    function filterForks(forks) {
      const sorted = forks.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
      if (sorted.length <= 3) {
        return sorted;
      } else {
        return sorted.slice(-3);
      }
    }
    async function fetchGistForks() {
      const octokit = new Octokit({
        auth: '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'
      })

      const response = await octokit.request('GET /gists/{gist_id}/forks', {
        gist_id: result.id
      })
      if ('data' in response) {
        const filteredForks = filterForks(response?.data)
        setGistForks(filteredForks)
      }
    }

    function mapBadges(fileKey) {
      const file = result.files[fileKey]
      switch (file.language) {
        case "Python":
          return <span className={styles['badge-py']}>PY</span>
        case "JavaScript":
          return <span className={styles['badge-js']}>JS</span>
        default:
          break;
      }
      return <></>
    }
    return (
      <div className={styles.card} key={result.id}>
        <h3>{result.title ? result.title : result.description}</h3>
        <div className={styles['badge-container']}>
          {Object.keys(result.files).length ? Object.keys(result.files).map(mapBadges) : null}
        </div>
        <div className="">
          <button className={styles.smallButton} type="button" onClick={fetchGistForks}>List Forks</button>
        </div>
        <div className="">
          {gistForks.length ? gistForks.map(gist => <ForkedGist gist={gist} key={gist.id} />) : null}
        </div>
      </div>
    )
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Git Gists</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Search for GitHub Gists!
        </h1>
        <form className={styles.form} onSubmit={fetchPublicGistsByUser}>

          <input className={styles.input} type="text" name="username" placeholder='Username' />
          <button className={styles.button} type="submit">Search!</button>
        </form>

        <div className={styles.results}>
          {searchResults.length > 0 ? searchResults.map(result => (
            <GistCard result={result} key={result.id} />
          )) : null}
        </div>

      </main>
    </div>
  )
}
